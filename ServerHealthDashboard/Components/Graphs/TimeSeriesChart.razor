@inject ISystemMetricsService MetricsService
@using ServerHealthDashboard.Services

<div style="height: 100%; width: 100%; padding: 16px; background-color: #24272f; border-radius: 4px;">
    <MudPaper Class="doc-section-component-container pa-4" Style="height:100%; background-color:#24272f;">
        <MudText Typo="Typo.h4">CPU usage</MudText>
        <MudTimeSeriesChart ChartSeries="@_series"
                            @bind-SelectedIndex="_index"
                            Width="@_width"
                            Height="@_height"
                            ChartOptions="@_options"
                            AxisChartOptions="@_axisChartOptions"
                            TimeLabelSpacing="TimeSpan.FromMinutes(5)"
                            TimeLabelSpacingRounding="_roundedLabelSpacing"
                            TimeLabelSpacingRoundingPadSeries="_roundedLabelSpacingPadSeries"
                            DataMarkerTooltipTimeLabelFormat="yyyy MMM dd HH:mm:ss" />
    </MudPaper>
</div>

@code
{
    private int _index = -1;
    private ChartOptions _options = new ChartOptions
        {
            YAxisLines = false,
            YAxisTicks = 10,
            MaxNumYAxisTicks = 10,
            YAxisRequireZeroPoint = true,
            XAxisLines = false,
            LineStrokeWidth = 1,
            ShowLegend = false,
            YAxisFormat = "0'%'",
            };

    private AxisChartOptions _axisChartOptions = new()
    {};

    private TimeSeriesChartSeries _chart1 = new();

    private List<TimeSeriesChartSeries> _series = new();

    private readonly Random _random = new Random();

    private bool _roundedLabelSpacing = false;
    private bool _roundedLabelSpacingPadSeries = false;

    private string _width = "100%";
    private string _height = "100%";
    private const int MaxDataPoints = 360;
    private CpuMetrics? cpuMetrics;
    private System.Threading.Timer? timer;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var now = DateTime.Now;
        _chart1 = new TimeSeriesChartSeries
            {
                Index = 0,
                Data = new List<TimeSeriesChartSeries.TimeValue>(),
                LineDisplayType = LineDisplayType.Line,
                DataMarkerTooltipTitleFormat = "{{X_VALUE}}",
                DataMarkerTooltipSubtitleFormat = "{{Y_VALUE}}%"
            };
        _series.Add(_chart1);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshMetrics();

        timer = new System.Threading.Timer(async _ =>
        {
            await RefreshMetrics();
            await InvokeAsync(StateHasChanged);
            await UpdateGraph();
        }, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
    }

    private async Task UpdateGraph()
    {
        if (cpuMetrics == null) return;

        var now = DateTime.Now;
        var newDataPoint = new TimeSeriesChartSeries.TimeValue(now, cpuMetrics.Usage);

        _chart1.Data.Add(newDataPoint);

        if (_chart1.Data.Count > MaxDataPoints)
        {
            _chart1.Data.RemoveAt(0);
        }
    }

    private async Task RefreshMetrics()
    {
        cpuMetrics = await MetricsService.GetCpuMetricsAsync();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}