@inject ISystemMetricsService MetricsService
@using ApexCharts
@using ServerHealthDashboard.Services

<div style="height: 100%; width: 100%; padding: 16px; background-color: #24272f; border-radius: 4px;">
    <ApexChart TItem="CoreData"
                Title="Per Core CPU Usage"
                Options="@options"
                @ref="chart">
        @foreach (var coreIndex in Enumerable.Range(0, numberOfCores))
        {
            var currentCore = coreIndex;
            <ApexPointSeries TItem="CoreData"
                                Items="@coreData.Where(d => d.CoreIndex == currentCore).ToList()"
                                Name="@($"Core {currentCore + 1}")"
                                SeriesType="SeriesType.Line"
                                XValue="@(e => e.Timestamp)"
                                YValue="@(e => e.UsagePercent)"
                                OrderBy="e => e.X" />
        }
    </ApexChart>
</div>

@code {
    private List<CoreData> coreData = new();
    private ApexChartOptions<CoreData> options = new();
    private ApexChart<CoreData>? chart;
    private CpuMetrics? cpuMetrics;
    private System.Threading.Timer? timer;
    private int numberOfCores = 0;
    private const int MaxDataPoints = 20;
    private bool isRendered = false;

    public class CoreData
    {
        public int CoreIndex { get; set; }
        public DateTime Timestamp { get; set; }
        public int UsagePercent { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCpuMetrics();
        ConfigureChartOptions();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;

            timer = new System.Threading.Timer(async _ =>
            {
                if (isRendered && chart != null)
                {
                    await InvokeAsync(async () =>
                    {
                        await LoadCpuMetrics();
                        StateHasChanged();
                    });
                }
            }, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
        }
    }

    private async Task LoadCpuMetrics()
    {
        cpuMetrics = await MetricsService.GetCpuMetricsAsync();

        if (cpuMetrics?.PerCoreUsage != null)
        {
            numberOfCores = cpuMetrics.PerCoreUsage.Count;
            var timestamp = DateTime.Now;

            var newDataPoints = cpuMetrics.PerCoreUsage
                .Select((usage, index) => new CoreData
                {
                    CoreIndex = index,
                    Timestamp = timestamp,
                    UsagePercent = (int)usage
                })
                .ToList();

            coreData.AddRange(newDataPoints);

            coreData = coreData
                .GroupBy(d => d.CoreIndex)
                .SelectMany(g => g.OrderByDescending(d => d.Timestamp).Take(MaxDataPoints))
                .OrderBy(d => d.Timestamp)
                .ToList();

            if (isRendered && chart != null)
            {
                await chart.UpdateSeriesAsync(true);
            }
        }
    }

    private void ConfigureChartOptions()
    {
        options = new ApexChartOptions<CoreData>
        {
            Chart = new Chart
            {
                Toolbar = new Toolbar
                {
                    Show = false
                },
                Animations = new Animations
                {
                    Enabled = false,
                },
                Background = "#24272f",
                Height = "100%",
                Width = "100%"
            },
            DataLabels = new ApexCharts.DataLabels
            {
                Enabled = false
            },
            Stroke = new Stroke
            {
                Curve = Curve.Straight,
                Width = 1.5
            },
            Grid = new Grid
            {
                BorderColor = "#2f333d",
                Row = new GridRow
                {
                    Colors = new List<string> { "#3a3f4c", "transparent" },
                    Opacity = 0.5d
                }
            },
            Colors = new List<string>
            {
                "#008FFB", "#00E396", "#FEB019", "#FF4560",
                "#775DD0", "#546E7A", "#26a69a", "#D10CE8",
                "#F9A3A4", "#90EE7E", "#FA4443", "#69D2E7"
            },
            Markers = new Markers
            {
                Size = 0,
                Hover = new MarkersHover
                {
                    SizeOffset = 6
                }
            },
            Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Title = new AxisTitle { Text = "CPU Usage (%)" },
                    Min = 0,
                    Max = 100,
                    TickAmount = 5,
                    Labels = new YAxisLabels
                    {
                        Formatter = "function(val) { return val.toFixed(0) + '%'; }"
                    }
                }

            },
            Xaxis = new XAxis
            {
                Title = new AxisTitle { Text = "Time" },
                Type = XAxisType.Datetime,
                Labels = new XAxisLabels
                {
                    RotateAlways = false,
                    Rotate = -45,
                    Format = "HH:mm"
                }
            },
            Legend = new Legend
            {
                Position = LegendPosition.Top,
                HorizontalAlign = ApexCharts.Align.Center,
                Floating = false,
                OffsetY = 0
            },
            Tooltip = new ApexCharts.Tooltip
            {
                Shared = true,
                Intersect = false,
            }
        };
    }
}